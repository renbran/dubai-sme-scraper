# =================================================================
# ✅ COMPLETE ODOO WEBHOOK SETUP - FRESH START
# =================================================================

## 🎯 LEAD FILTERING LOGIC:
- ✅ SMEs with EITHER phone OR email are pushed to Odoo CRM
- 📊 ALL leads are saved to CSV files regardless of completeness
- 🔍 Filtered out: "Not available", empty fields, "Contact via website"
- ⏭️ Only skipped if BOTH phone AND email are missing

## 🔧 STEP 1: WEBHOOK AUTOMATION CONFIGURATION

### Go to: Settings → Technical → Automation → Automated Actions

**Create New Automation:**
- **Name:** Dubai SME Lead Webhook Handler
- **Model:** Base Automation (or Any model)
- **Trigger:** Webhook

---

## 🌐 STEP 2: WEBHOOK URL CONFIGURATION

### In the Webhook section:

**URL (EXACT):**
```
http://scholarixglobal.com/web/hook/aa6e5d99-5030-4128-864f-9d9a35725c0f
```

**Target Record (CRITICAL!):**
```
    env['crm.lead'].create({})
```

### ⚠️ IMPORTANT: 
- The Target Record field MUST have: `env['crm.lead'].create({})`
- This creates a dummy lead record context for the webhook to run

---

## 💻 STEP 3: WEBHOOK CODE (COPY & PASTE)

### In the "Code" section, paste this EXACT code:

```python
# Dubai SME Lead Webhook Handler
# Processes incoming leads from Google Maps scraper

try:
    # Extract lead data from webhook payload
    company_name = payload.get('Name', 'Unknown Company')
    phone = payload.get('Phone', '')
    email = payload.get('Email', '')
    website = payload.get('Website', '')
    address = payload.get('Address', '')
    category = payload.get('Category', 'Business Services')
    priority = payload.get('Priority', 'MEDIUM')
    quality = payload.get('Quality Score', '5')
    search_term = payload.get('Search Term', '')
    
    # Clean contact data
    if phone in ['Contact via website', 'Not available', '']:
        phone = False
    if email in ['Not available', '']:
        email = False  
    if website in ['Not available', '']:
        website = False
    
    # Create or update company (partner)
    partner = env['res.partner'].search([('name', '=', company_name)], limit=1)
    
    if not partner:
        # Create new company
        partner = env['res.partner'].create({
            'name': company_name,
            'phone': phone,
            'email': email,
            'website': website,
            'street': address,
            'city': 'Dubai',
            'country_id': env['res.country'].search([('code', '=', 'AE')], limit=1).id,
            'is_company': True,
            'company_type': 'company',
            'category_id': [(4, env['res.partner.category'].search([('name', '=', 'Dubai SME')], limit=1).id or env['res.partner.category'].create({'name': 'Dubai SME'}).id)]
        })
    else:
        # Update existing company with new info
        partner.write({
            'phone': phone or partner.phone,
            'email': email or partner.email,
            'website': website or partner.website,
            'street': address or partner.street
        })
    
    # Set CRM priority
    crm_priority = '1'  # Medium (default)
    if priority == 'URGENT':
        crm_priority = '3'  # High
    elif priority == 'HIGH':
        crm_priority = '2'  # Normal
    elif priority == 'LOW':
        crm_priority = '0'  # Low
    
    # Create detailed lead description
    description = f"""🏢 Dubai SME Lead - {category}

📊 Lead Quality: {quality}/10
📍 Priority Level: {priority}
🔍 Search Term: {search_term}

📞 Contact Information:
• Phone: {payload.get('Phone', 'Not available')}
• Email: {payload.get('Email', 'Not available')}
• Website: {payload.get('Website', 'Not available')}
• Address: {address}

🎯 Business Potential:
• ERP Implementation Ready
• Digital Transformation Candidate
• Automation & AI Opportunities
• SME Scaling Solutions

📈 Next Steps:
• Schedule discovery call within 24-48h
• Assess current business systems
• Prepare customized solution proposal
• Follow up on specific pain points

📋 Source: Google Maps Scraper
⏰ Generated: {payload.get('Timestamp', '')}
"""
    
    # Check for existing lead to avoid duplicates
    existing_lead = env['crm.lead'].search([
        ('partner_id', '=', partner.id),
        ('name', 'ilike', company_name[:20])  # Partial match
    ], limit=1)
    
    if not existing_lead:
        # Create new CRM lead
        lead = env['crm.lead'].create({
            'name': f"{company_name} - Dubai SME Opportunity",
            'partner_id': partner.id,
            'contact_name': company_name,
            'phone': phone,
            'email_from': email,
            'website': website,
            'street': address,
            'city': 'Dubai',
            'country_id': env['res.country'].search([('code', '=', 'AE')], limit=1).id,
            'priority': crm_priority,
            'type': 'opportunity',
            'description': description,
            'user_id': env.user.id,
            'team_id': env['crm.team'].search([], limit=1).id  # Default sales team
        })
        
        # Add relevant tags
        tags_to_add = ['Dubai SME', 'Google Maps Lead', category, f'Quality {quality}']
        
        for tag_name in tags_to_add:
            if tag_name.strip():
                # Find or create tag
                tag = env['crm.tag'].search([('name', '=', tag_name)], limit=1)
                if not tag:
                    tag = env['crm.tag'].create({
                        'name': tag_name,
                        'color': 2  # Green color
                    })
                
                # Add tag to lead
                lead.write({'tag_ids': [(4, tag.id)]})
        
        # Log successful creation
        lead.message_post(
            body=f"🎯 New Dubai SME lead created from Google Maps scraper<br/>Quality Score: {quality}/10<br/>Search Term: {search_term}",
            message_type='notification'
        )
    
    else:
        # Update existing lead with new information
        existing_lead.write({
            'description': existing_lead.description + f"\n\n--- UPDATED {payload.get('Timestamp', '')} ---\n" + description
        })
        
        existing_lead.message_post(
            body=f"🔄 Lead updated with new scraper data<br/>Quality Score: {quality}/10",
            message_type='notification'
        )

except Exception as e:
    # Log error for debugging
    env['ir.logging'].create({
        'name': 'Dubai SME Webhook Error',
        'level': 'ERROR',
        'message': f"Webhook processing failed: {str(e)}\nPayload: {payload}",
        'func': 'webhook_handler'
    })
    
    # Re-raise to show in webhook logs
    raise Exception(f'Dubai SME Webhook Error: {str(e)}')
```

---

## ✅ STEP 4: SAVE AND ACTIVATE

1. **Save** the automation
2. **Activate** it (toggle switch)
3. **Test** with a sample payload

---

## 🧪 STEP 5: TEST CONFIGURATION

### Sample test payload:
```json
{
    "Name": "Test Company LLC",
    "Category": "Business Setup Services",
    "Phone": "+971501234567",
    "Email": "info@testcompany.ae",
    "Website": "https://testcompany.ae",
    "Address": "Dubai Marina, Dubai",
    "Priority": "HIGH",
    "Quality Score": "8",
    "Data Source": "Google Maps Scraper",
    "Search Term": "business setup companies Dubai",
    "Timestamp": "2025-10-15T17:50:00.000Z"
}
```

---

## 🔍 STEP 6: VERIFICATION CHECKLIST

After setup, verify:

✅ **Automation is Active**
✅ **URL is correct**: http://scholarixglobal.com/web/hook/aa6e5d99-5030-4128-864f-9d9a35725c0f
✅ **Target Record**: `env['crm.lead'].create({})`
✅ **Code is pasted** completely
✅ **No syntax errors** in code
✅ **Test with sample data**

---

## 🎯 EXPECTED RESULTS

When working correctly:
- ✅ Creates company in Partners
- ✅ Creates CRM lead/opportunity  
- ✅ Sets proper priority levels
- ✅ Adds relevant tags
- ✅ Creates detailed descriptions
- ✅ Prevents duplicates
- ✅ Logs activities

---

## 🚨 TROUBLESHOOTING

If webhook fails:
1. Check **Technical → Automated Actions** logs
2. Verify **Target Record** field exactly: `env['crm.lead'].create({})`
3. Ensure **CRM app is installed**
4. Check **user permissions** for CRM access
5. Test with simple payload first

---

## 📞 SUPPORT

If issues persist:
- Check Odoo logs: **Settings → Technical → Logging**
- Test webhook URL manually
- Verify CRM module is installed and accessible

=================================================================